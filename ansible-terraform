How to install terraform and terraform-libvirt-provider on remote bare metal debian server.
Soo… kids, in today's class we will install the next big automation buzz word out there "Terraform" on our bare-metal server and we will also build a plugin called "terraform-libvirt-provider" it's required if you wish to manage a libvirsh based VMs on the Host server, to see how to install KVM and Libvirsh on a remote server have a look at my previous blog post.
here we will create 3 (I say 2.5) roles to do the following:
install terraform on a remote server
clone and build the terraform-libvirt-provider binary (using "go") and init a terrafom at the home directory.
copy our terraform source code to the remote server and execute a "terrafom_apply" to create a test VM (VM image built using cloud-init).
here we do the folowing in the following order:
/roles/terraform/tasks/debian.yml

first we ensure that all the prerequisites are available, all u need is to unziip a file!
so you "ensure" to make sure it's there.
next you just download it and put it in it's place.





the best way to not get trapped in golang's fun trip with setting PATH varibles rolletcoster ride is to never thouch that mess.
to never be able to touch it, i made sure I used the right user to run the go command.
let me explain: here the goal is to create the binary for the lib-virt provider.
in there documentation they say it would be created in the bin folder.
go was compaining it yould not find the go path something like that.
especially if u do not want to use the full path.
main lession learnt is to call using the full path of the go route.
if u want to access it as non-root user it's a whole new gimmic, to set the .profile etc,.
for this another user, to avoid all that, i made sure the default setting is not to be a root user for the entire role, instead it's important/ or very usefull to be the right kinda of user at the very early stagee.
in my case the go folder created by this task
/roles/terraform-libvirt-provider/tasks/debian.yml



This would ideally be the place where everything comes together finally.
the big climax, ( that never happened #spolerAlert #toolate)
even thought this would work perfectly well if your baremetal server is a virgin server,
but unfortunately that's seldom the case in the real world, no self respcting admins with a pulse, would let that be the case(… I think).
but in my case the issue was there was already an preexisting infra on the server (mainly networkconfigs and virsh VMs managed by KVM hypervisers), now the terraformform docs do give a nifty soultions for this, using "imports" or something <do proper reasearch on why we cannot codify all the imports on existing infra> am not really sure how it works, based on the 2nd hand info from stackoverflow and googing around, i see that i should execute the "import"on terraform cli, i find this sooultion ugly, i woulld rather mentione it in the code, to import all the exising infra,
one idea is to use the ansible facts as the input for the terraform imports and make terraform initialize and maintain a terraform state from there.<should do reasearch on, weather it's possiable, if nt why it's not possablle">
/roles/terraform_apply/tasks/debian.yml